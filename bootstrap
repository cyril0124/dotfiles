#!/usr/bin/env bash

DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  # If the destination file exists, ask the user what to do
  # `-f`: file, `-d`: directory, `-L`: symbolic link
  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

if [ -n "$BASH_VERSION" ]; then
    shell_rc=$(realpath "${BASH_SOURCE[0]}")
    shell="bash"
elif [ -n "$ZSH_VERSION" ]; then
    shell_rc=$(realpath "$0")
    shell="zsh"
else
    fail "Unknown shell: $current_shell"
fi

info "Shell: $shell"
info "Shell RC: $shell_rc"
info "DOTFILES_ROOT: $DOTFILES_ROOT"

install_dotfiles () {
    info 'installing dotfiles'

    local overwrite_all=false backup_all=false skip_all=false

    for src in $(find -H "$DOTFILES_ROOT/config" -mindepth 1 -maxdepth 1 -type d -not -path '*.git*')
    do
        dst="$HOME/.config/$(basename "${src%.*}")"
        link_file "$src" "$dst"
    done

    # TODO: zsh config
}

install_pixi() {
    info 'installing pixi'

    local overwrite_all=false backup_all=false skip_all=false

    # Install pixi if not installed
    if ! command -v pixi &> /dev/null; then
        curl -fsSL https://pixi.sh/install.sh | $shell
        success "Pixi installed"
    else
        info "Pixi is already installed"
    fi

    # Install global pixi packages
    pixi_manifest_dir=$HOME/.pixi/manifests
    mkdir -p $pixi_manifest_dir
    link_file "$DOTFILES_ROOT/pixi/pixi-global.toml" "$pixi_manifest_dir/pixi-global.toml"
    pixi global sync
}

install_dotfiles
install_pixi

# TODO: Git config

# Mac specific stuff here
if [ "$(uname -s)" == "Darwin" ]
then
    # TODO:
    echo
fi

echo ''
echo '  All installed!'
